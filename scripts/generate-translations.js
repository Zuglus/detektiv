#!/usr/bin/env node
/* eslint-disable @typescript-eslint/no-require-imports */

const fs = require('fs/promises');
const path = require('path');
const matter = require('gray-matter');

// –ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –∏–∑ —Ñ–∞–π–ª–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
// –°–∫–∞–Ω–∏—Ä—É–µ—Ç /data/stati/ –∏ /data/blog/ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è translatedPosts.json

const STATI_DIR = path.join(__dirname, '../src/data/stati');
const BLOG_DIR = path.join(__dirname, '../src/data/blog');
const OUTPUT_FILE = path.join(__dirname, '../src/data/translatedPosts.json');

async function fileExists(p) {
  try {
    await fs.access(p);
    return true;
  } catch {
    return false;
  }
}

async function extractSlugFromFile(filePath) {
  try {
    if (!(await fileExists(filePath))) {
      return null;
    }

    const fileContent = await fs.readFile(filePath, 'utf8');
    const { data } = matter(fileContent);

    return data.slug || null;
  } catch (error) {
    console.warn(`‚ö†Ô∏è  –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ ${filePath}:`, error.message);
    return null;
  }
}

async function getFileNumbers(directory) {
  if (!(await fileExists(directory))) {
    console.warn(`‚ö†Ô∏è  –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: ${directory}`);
    return [];
  }

  const files = await fs.readdir(directory);

  return files
    .filter(file => file.endsWith('.md'))
    .map(file => parseInt(file.replace('.md', ''), 10))
    .filter(num => !isNaN(num))
    .sort((a, b) => a - b);
}

async function generateTranslationPair(fileNumber) {
  const ruFile = path.join(STATI_DIR, `${fileNumber}.md`);
  const enFile = path.join(BLOG_DIR, `${fileNumber}.md`);

  const [ruSlug, enSlug] = await Promise.all([
    extractSlugFromFile(ruFile),
    extractSlugFromFile(enFile),
  ]);

  if (!ruSlug || !enSlug) {
    console.warn(`‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç slug –¥–ª—è —Ñ–∞–π–ª–∞ ${fileNumber}: ru=${ruSlug}, en=${enSlug}`);
    return null;
  }

  return {
    en: enSlug,
    ru: ruSlug,
  };
}

async function generateTranslations() {
  console.log('üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –∏–∑ —Ñ–∞–π–ª–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã...');

  const [ruNumbers, enNumbers] = await Promise.all([
    getFileNumbers(STATI_DIR),
    getFileNumbers(BLOG_DIR),
  ]);

  console.log(`üìä –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: stati=${ruNumbers.length}, blog=${enNumbers.length}`);

  const commonNumbers = ruNumbers.filter(num => enNumbers.includes(num));

  console.log(`üîó –§–∞–π–ª–æ–≤ —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏: ${commonNumbers.length}`);

  if (commonNumbers.length === 0) {
    console.warn('‚ö†Ô∏è  –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏');
    return;
  }

  const translations = [];

  for (const fileNumber of commonNumbers) {
    const pair = await generateTranslationPair(fileNumber);
    if (pair) {
      translations.push(pair);
      console.log(`‚úÖ ${fileNumber}.md: ${pair.ru} ‚Üî ${pair.en}`);
    }
  }

  if (translations.length === 0) {
    console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞');
    process.exit(1);
  }

  const outputContent = JSON.stringify(translations, null, 2);
  await fs.writeFile(OUTPUT_FILE, outputContent, 'utf8');

  console.log(`üéâ –£—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ ${translations.length} –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –≤ ${OUTPUT_FILE}`);

  const orphanedRu = ruNumbers.filter(num => !commonNumbers.includes(num));
  const orphanedEn = enNumbers.filter(num => !commonNumbers.includes(num));

  if (orphanedRu.length > 0) {
    console.log(`üìù –§–∞–π–ª—ã –±–µ–∑ –ø–µ—Ä–µ–≤–æ–¥–∞ (—Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–µ): ${orphanedRu.join(', ')}`);
  }

  if (orphanedEn.length > 0) {
    console.log(`üìù –§–∞–π–ª—ã –±–µ–∑ –ø–µ—Ä–µ–≤–æ–¥–∞ (—Ç–æ–ª—å–∫–æ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ): ${orphanedEn.join(', ')}`);
  }
}

if (require.main === module) {
  generateTranslations();
}

module.exports = { generateTranslations };

