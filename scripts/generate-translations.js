#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const matter = require('gray-matter');

/**
 * –ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –∏–∑ —Ñ–∞–π–ª–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
 * –°–∫–∞–Ω–∏—Ä—É–µ—Ç /data/stati/ –∏ /data/blog/ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è translatedPosts.json
 */

const STATI_DIR = path.join(__dirname, '../src/data/stati');
const BLOG_DIR = path.join(__dirname, '../src/data/blog');
const OUTPUT_FILE = path.join(__dirname, '../src/data/translatedPosts.json');

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç slug –∏–∑ frontmatter —Ñ–∞–π–ª–∞
 */
function extractSlugFromFile(filePath) {
  try {
    if (!fs.existsSync(filePath)) {
      return null;
    }
    
    const fileContent = fs.readFileSync(filePath, 'utf8');
    const { data } = matter(fileContent);
    
    return data.slug || null;
  } catch (error) {
    console.warn(`‚ö†Ô∏è  –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ ${filePath}:`, error.message);
    return null;
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–æ–º–µ—Ä–æ–≤ —Ñ–∞–π–ª–æ–≤ –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
 */
function getFileNumbers(directory) {
  if (!fs.existsSync(directory)) {
    console.warn(`‚ö†Ô∏è  –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: ${directory}`);
    return [];
  }
  
  return fs.readdirSync(directory)
    .filter(file => file.endsWith('.md'))
    .map(file => parseInt(file.replace('.md', '')))
    .filter(num => !isNaN(num))
    .sort((a, b) => a - b);
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–±—ä–µ–∫—Ç –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–ª—è –ø–∞—Ä—ã —Ñ–∞–π–ª–æ–≤
 */
function generateTranslationPair(fileNumber) {
  const ruFile = path.join(STATI_DIR, `${fileNumber}.md`);
  const enFile = path.join(BLOG_DIR, `${fileNumber}.md`);
  
  const ruSlug = extractSlugFromFile(ruFile);
  const enSlug = extractSlugFromFile(enFile);
  
  if (!ruSlug || !enSlug) {
    console.warn(`‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç slug –¥–ª—è —Ñ–∞–π–ª–∞ ${fileNumber}: ru=${ruSlug}, en=${enSlug}`);
    return null;
  }
  
  return {
    en: enSlug,
    ru: ruSlug
  };
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
 */
function generateTranslations() {
  console.log('üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –∏–∑ —Ñ–∞–π–ª–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã...');
  
  // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–∫–∏ —Ñ–∞–π–ª–æ–≤ –∏–∑ –æ–±–µ–∏—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
  const ruNumbers = getFileNumbers(STATI_DIR);
  const enNumbers = getFileNumbers(BLOG_DIR);
  
  console.log(`üìä –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: stati=${ruNumbers.length}, blog=${enNumbers.length}`);
  
  // –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ - —Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ –æ–±–µ–∏—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ö
  const commonNumbers = ruNumbers.filter(num => enNumbers.includes(num));
  
  console.log(`üîó –§–∞–π–ª–æ–≤ —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏: ${commonNumbers.length}`);
  
  if (commonNumbers.length === 0) {
    console.warn('‚ö†Ô∏è  –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏');
    return;
  }
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–∞—Ä—ã –ø–µ—Ä–µ–≤–æ–¥–æ–≤
  const translations = [];
  
  for (const fileNumber of commonNumbers) {
    const pair = generateTranslationPair(fileNumber);
    if (pair) {
      translations.push(pair);
      console.log(`‚úÖ ${fileNumber}.md: ${pair.ru} ‚Üî ${pair.en}`);
    }
  }
  
  if (translations.length === 0) {
    console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞');
    process.exit(1);
  }
  
  // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  const outputContent = JSON.stringify(translations, null, 2);
  fs.writeFileSync(OUTPUT_FILE, outputContent, 'utf8');
  
  console.log(`üéâ –£—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ ${translations.length} –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –≤ ${OUTPUT_FILE}`);
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  const orphanedRu = ruNumbers.filter(num => !commonNumbers.includes(num));
  const orphanedEn = enNumbers.filter(num => !commonNumbers.includes(num));
  
  if (orphanedRu.length > 0) {
    console.log(`üìù –§–∞–π–ª—ã –±–µ–∑ –ø–µ—Ä–µ–≤–æ–¥–∞ (—Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–µ): ${orphanedRu.join(', ')}`);
  }
  
  if (orphanedEn.length > 0) {
    console.log(`üìù –§–∞–π–ª—ã –±–µ–∑ –ø–µ—Ä–µ–≤–æ–¥–∞ (—Ç–æ–ª—å–∫–æ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ): ${orphanedEn.join(', ')}`);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
if (require.main === module) {
  generateTranslations();
}

module.exports = { generateTranslations };